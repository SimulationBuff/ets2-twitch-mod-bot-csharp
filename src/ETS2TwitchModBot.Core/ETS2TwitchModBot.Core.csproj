<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- Target modern .NET 8 -->
    <TargetFramework>net8.0</TargetFramework>

    <!-- Enable nullable & implicit usings to reduce boilerplate -->
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <LangVersion>latest</LangVersion>

    <!-- Build / package metadata -->
    <AssemblyName>ETS2TwitchModBot.Core</AssemblyName>
    <RootNamespace>ETS2TwitchModBot.Core</RootNamespace>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>

    <!-- Enforce analyzers and treat warnings as errors so CI fails on style/analysis violations -->
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <!-- Run Roslyn analyzers during build to enforce StyleCop / code-style rules -->
    <RunAnalyzersDuringBuild>true</RunAnalyzersDuringBuild>
    <!-- Use latest analysis level to pick up current analyzer rules -->
    <AnalysisLevel>latest</AnalysisLevel>
    <!-- Enforce editorconfig/code-style rules during build -->
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
  </PropertyGroup>

  <ItemGroup>
    <!-- JSON handling -->
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />

    <!-- Configuration / DI / Logging primitives -->
    <PackageReference Include="Microsoft.Extensions.Configuration" Version="8.0.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="8.0.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="8.0.0" />
    <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" Version="8.0.0" />
  </ItemGroup>

  <!-- Optional external dependencies that may not be available on all CI images.
       To include Twitch/StyleCop packages set EnableExternalDependencies to true
       either in a Directory.Build.props or by passing -p:EnableExternalDependencies=true
       to dotnet/MSBuild. Default is false to allow constrained CI environments to restore. -->
  <PropertyGroup>
    <EnableExternalDependencies>false</EnableExternalDependencies>
  </PropertyGroup>

  <ItemGroup Condition="'$(EnableExternalDependencies)' == 'true'">
    <!-- Twitch integration (opt-in) -->
    <PackageReference Include="TwitchLib.Client" Version="4.2.0" />
    <PackageReference Include="TwitchLib.Api" Version="4.1.0" />

    <!-- Static analysis / style enforcement (opt-in) -->
    <PackageReference Include="StyleCop.Analyzers" Version="1.2.0" PrivateAssets="all" />
  </ItemGroup>

  <!-- ProjectReference to the App project intentionally removed to avoid circular project references during CI.
       The core library is designed to build independently. If you need to locally wire the App project,
       add a ProjectReference in your local solution or restore this block. -->

  <!-- Optional: produce a NuGet package on build if you later want to publish -->
  <PropertyGroup>
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    <PackageId>ETS2TwitchModBot.Core</PackageId>
    <Authors>SimulationBuff</Authors>
    <Company>SimulationBuff</Company>
    <Description>Core library for ETS2 Twitch Mod Bot (decryption, parsing, caching, DLC detection, bot core)</Description>
    <RepositoryUrl>https://github.com/SimulationBuff/ets2-twitch-mod-bot-csharp</RepositoryUrl>
  </PropertyGroup>

</Project>
