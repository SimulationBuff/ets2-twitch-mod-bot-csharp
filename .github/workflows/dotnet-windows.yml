name: .NET Windows Build, Test & Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [created]
  workflow_dispatch:

concurrency:
  group: dotnet-windows-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  CONFIGURATION: Release
  RUNTIME: win-x64
  PUBLISH_DIR: artifacts/win-x64

jobs:
  build-windows:
    name: Build, Test & Publish (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ETS2TwitchModBot.sln

      - name: Build solution (analyzers)
        # Ensure analyzers run during build; csproj also sets analyzer properties but pass explicitly here for CI.
        run: dotnet build ETS2TwitchModBot.sln --configuration ${{ env.CONFIGURATION }} --no-restore -p:RunAnalyzersDuringBuild=true

      - name: Run unit tests
        run: dotnet test ETS2TwitchModBot.sln --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal

      - name: Publish Windows single-file executable
        run: |
          mkdir -p ${{ env.PUBLISH_DIR }}
          dotnet publish src/ETS2TwitchModBot.App/ETS2TwitchModBot.App.csproj \
            -c ${{ env.CONFIGURATION }} \
            -r ${{ env.RUNTIME }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=false \
            -o ${{ env.PUBLISH_DIR }}

      - name: List publish output
        run: dir ${{ env.PUBLISH_DIR }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ETS2TwitchModBot-win-x64
          path: ${{ env.PUBLISH_DIR }}
          retention-days: 7

  build-linux:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    needs: build-windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ETS2TwitchModBot.sln

      - name: Build solution (analyzers)
        run: dotnet build ETS2TwitchModBot.sln --configuration ${{ env.CONFIGURATION }} --no-restore -p:RunAnalyzersDuringBuild=true

      - name: Run unit tests
        run: dotnet test ETS2TwitchModBot.sln --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal

  attach-release-artifacts:
    name: Attach artifacts to release (when triggered by a release)
    runs-on: windows-latest
    needs: build-windows
    if: github.event_name == 'release'
    steps:
      - name: Download artifacts from workflow
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ETS2TwitchModBot-win-x64
          path: ./release-artifacts

      - name: Create release assets
        id: create_release
        if: ${{ steps['download-artifact'].outcome == 'success' || always() }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name || github.event.release.tag_name }}
          body: ${{ github.event.release.body || 'Automated release created by CI' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url || github.event.release.upload_url }}
          asset_path: ./release-artifacts
          asset_name: ETS2TwitchModBot-win-x64.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
