<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- Test project meta -->
    <TargetFramework>net8.0</TargetFramework>
    <IsTestProject>true</IsTestProject>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <LangVersion>latest</LangVersion>
    <AssemblyName>ETS2TwitchModBot.Tests</AssemblyName>
    <RootNamespace>ETS2TwitchModBot.Tests</RootNamespace>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <IsPackable>false</IsPackable>

    <!-- Run analyzers during build and treat analyzer warnings as errors to enforce quality.
         These settings emulate an opinionated lint/format check similar to ruff/black for C#. -->
    <RunAnalyzersDuringBuild>true</RunAnalyzersDuringBuild>
    <RunAnalyzersDuringLiveAnalysis>true</RunAnalyzersDuringLiveAnalysis>
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
    <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <!-- Testing framework & runner -->
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.10.0" />
    <PackageReference Include="xunit" Version="2.4.2" />
    <PackageReference Include="xunit.runner.visualstudio" Version="2.4.5" />

    <!-- Assertion helpers / mocking -->
    <PackageReference Include="FluentAssertions" Version="7.6.0" />
    <PackageReference Include="Moq" Version="4.18.4" />

    <!-- Coverage collector compatible with dotnet test -->
    <PackageReference Include="coverlet.collector" Version="3.2.0" />

    <!-- Optional analyzer to enforce style rules (similar to ruff). This will run during build
         and surface style issues as analyzer diagnostics. Configure rules in an .editorconfig. -->
    <PackageReference Include="StyleCop.Analyzers" Version="1.2.0" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <!-- Reference the core project to test its public surface -->
    <ProjectReference Include="..\..\ets2-twitch-mod-bot-csharp\src\ETS2TwitchModBot.Core\ETS2TwitchModBot.Core.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <!-- Enable coverlet integration when running `dotnet test` with --collect:\"XPlat Code Coverage\" -->
    <CollectCoverage>true</CollectCoverage>
    <CoverletOutputFormat>opencover</CoverletOutputFormat>
  </PropertyGroup>

  <ItemGroup>
    <!-- Ensure we run tests with a consistent console test runner in CI -->
    <DotNetCliToolReference Include="dotnet-reportgenerator-globaltool" Version="5.1.23" />
  </ItemGroup>

  <!-- Keep test projects small and focused. Use an .editorconfig placed at repo root to configure StyleCop and formatting rules. -->

</Project>
